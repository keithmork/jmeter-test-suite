<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree/>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="最常用" enabled="true">
        <stringProp name="TestPlan.comments">几乎任何HTTP测试计划里都可以无脑加上</stringProp>
      </GenericController>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="常用全局变量" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="BASE_DIR" elementType="Argument">
              <stringProp name="Argument.name">BASE_DIR</stringProp>
              <stringProp name="Argument.value">${__P(omj.baseDir)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">oh-my-jmeter目录</stringProp>
            </elementProp>
            <elementProp name="DATA_DIR" elementType="Argument">
              <stringProp name="Argument.name">DATA_DIR</stringProp>
              <stringProp name="Argument.value">${__P(omj.dataDir)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">资源文件目录</stringProp>
            </elementProp>
            <elementProp name="SCRIPT_DIR" elementType="Argument">
              <stringProp name="Argument.name">SCRIPT_DIR</stringProp>
              <stringProp name="Argument.value">${__P(omj.scriptDir)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">脚本文件目录</stringProp>
            </elementProp>
            <elementProp name="REPORT_DIR" elementType="Argument">
              <stringProp name="Argument.name">REPORT_DIR</stringProp>
              <stringProp name="Argument.value">${__P(omj.reportDir)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">输出报告目录</stringProp>
            </elementProp>
            <elementProp name="TEST_PLAN_DIR" elementType="Argument">
              <stringProp name="Argument.name">TEST_PLAN_DIR</stringProp>
              <stringProp name="Argument.value">${__P(omj.testPlanDir)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">测试计划文件目录</stringProp>
            </elementProp>
            <elementProp name="TEST_FILE_DIR" elementType="Argument">
              <stringProp name="Argument.name">TEST_FILE_DIR</stringProp>
              <stringProp name="Argument.value">${__groovy(import org.apache.jmeter.services.FileServer;FileServer.getFileServer();)}</stringProp>
              <stringProp name="Argument.desc">当前jmx文件所在目录</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TEST_FILE_NAME" elementType="Argument">
              <stringProp name="Argument.name">TEST_FILE_NAME</stringProp>
              <stringProp name="Argument.value">${__groovy(import org.apache.jmeter.services.FileServer;FileServer.getFileServer().getScriptName();)}</stringProp>
              <stringProp name="Argument.desc">当前jmx文件名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">所有路径使用变量，确保脚本拿到任何机器都能跑</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="测试环境设置-xx" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ENV" elementType="Argument">
              <stringProp name="Argument.name">ENV</stringProp>
              <stringProp name="Argument.value">xx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">环境名，如dev、test、staging、prod等</stringProp>
            </elementProp>
            <elementProp name="HOST" elementType="Argument">
              <stringProp name="Argument.name">HOST</stringProp>
              <stringProp name="Argument.value">192.168.3.221</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">域名或ip</stringProp>
            </elementProp>
            <elementProp name="PORT" elementType="Argument">
              <stringProp name="Argument.name">PORT</stringProp>
              <stringProp name="Argument.value">80</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROTOCOL" elementType="Argument">
              <stringProp name="Argument.name">PROTOCOL</stringProp>
              <stringProp name="Argument.value">http</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">https 或 http</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">如果需要在多个环境运行测试，复制多份修改地址等，通过启用／禁用组件来切换环境</stringProp>
        </Arguments>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">注意：GUI模式只适合用来调试，调通脚本后禁用所有监听器，关掉界面，改用命令行运行测试</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">注意：GUI模式只适合用来调试，调通脚本后禁用所有监听器，关掉界面，改用命令行运行测试

特别注意：只能用于调试或功能测试，不能用于性能测试
这监听器会给每个请求的响应创建1个对象，如果发的请求太多，容易导致OOM，调通后建议勾上Errors</stringProp>
        </ResultCollector>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">60000</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <stringProp name="TestPlan.comments">通常直接放进线程组就行
也可以自己在下面添加cookie</stringProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
      </hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="录制" enabled="true"/>
      <hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true">
          <stringProp name="TestPlan.comments">这个放进线程组，录制的内容会出现在它下面</stringProp>
        </RecordingController>
        <hashTree/>
        <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="false">
          <stringProp name="ProxyControlGui.port">8888</stringProp>
          <collectionProp name="ProxyControlGui.exclude_list">
            <stringProp name="-319995878">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|woff)([\?;])?.*</stringProp>
          </collectionProp>
          <collectionProp name="ProxyControlGui.include_list">
            <stringProp name="851396623">.*192\.168.*</stringProp>
          </collectionProp>
          <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
          <intProp name="ProxyControlGui.grouping_mode">4</intProp>
          <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
          <stringProp name="ProxyControlGui.sampler_type_name">HttpClient4</stringProp>
          <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
          <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
          <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
          <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
          <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
          <boolProp name="ProxyControlGui.notify_child_sl_filtered">true</boolProp>
          <boolProp name="ProxyControlGui.regex_match">true</boolProp>
          <stringProp name="ProxyControlGui.content_type_include"></stringProp>
          <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
          <stringProp name="TestPlan.comments">这个放进工作台，启用
录制时操作隔超过5秒视为新步骤，放到不同的事务控制器下

注意：包含／排除URL使用正则表达式完整匹配</stringProp>
        </ProxyControl>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">60000</stringProp>
            <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="TestPlan.comments">凡是这组件里不为空的字段，录制的请求的相应字段为空
省去逐个请求改ip的功夫</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
            <stringProp name="TestPlan.comments">录到的请求 (^xxx$)</stringProp>
          </Arguments>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename">${BASE_DIR}/user-files/bodies/${ENV}/recording.xml</stringProp>
            <stringProp name="TestPlan.comments">显示录到的响应内容</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="TestPlan.comments">保存响应内容到文件
如果识别不了文件类型，后缀是.unknown</stringProp>
            <stringProp name="FileSaver.filename">${BASE_DIR}/user-files/bodies/${ENV}/response_</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <stringProp name="FileSaver.variablename">response</stringProp>
          </ResultSaver>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="TestPlan.comments">定时器会被加进录制的每个事务控制器的第1个请求下
${T} 代表按实际的操作间隔</stringProp>
            <stringProp name="ConstantTimer.delay">${T}</stringProp>
            <stringProp name="RandomTimer.range">100.0</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="造数据 &amp; 数据文件" enabled="true"/>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="TestPlan.comments">不写变量名时，csv文件第1行视为变量名</stringProp>
          <stringProp name="filename">${DATA_DIR}/${ENV}/foo.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="# check files exist" enabled="true">
          <stringProp name="TestPlan.comments">通常用在setup线程组里，确保要读的csv文件存在

接收任意个参数，均为文件路径
参数之间用空格分隔</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${DATA_DIR}/${ENV}/foo.csv ${DATA_DIR}/${ENV}/bar.csv</stringProp>
          <stringProp name="filename">${SCRIPT_DIR}/check_files_exist.groovy</stringProp>
          <stringProp name="cacheKey">55a82a3a-d5be-42ba-a157-d6c68c8618b5</stringProp>
          <stringProp name="script"></stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="# delete old files" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${DATA_DIR}/${ENV}/foo.csv ${DATA_DIR}/${ENV}/bar.csv</stringProp>
          <stringProp name="filename">${SCRIPT_DIR}/delete_files.groovy</stringProp>
          <stringProp name="cacheKey">55a82a3a-d5be-42ba-a157-d6c68c8618b5</stringProp>
          <stringProp name="script"></stringProp>
          <stringProp name="TestPlan.comments">通常用在teardown线程组里，把不要的csv文件删掉

接收任意个参数，均为文件路径
参数之间用空格分隔</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="# save to csv" enabled="true">
          <stringProp name="cacheKey">55a82a3a-d5be-42ba-a157-d6c68c8618b5</stringProp>
          <stringProp name="filename">${SCRIPT_DIR}/write_files.groovy</stringProp>
          <stringProp name="parameters">${DATA_DIR}/${ENV}/example.csv ${foo},${bar},${foobar}</stringProp>
          <stringProp name="script"></stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="TestPlan.comments">通常用于把从响应里提取的变量内容写入csv文件

参数：文件路径、要写入的内容（占一整行）
参数之间用空格分隔</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="# split csv file" enabled="true">
          <stringProp name="TestPlan.comments">把1个CSV文件里的某些行移动到另一个文件

参数：源文件路径、目标文件路径、第几行开始、总共移走几行
参数之间用空格分隔</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${DATA_DIR}/${ENV}/src.csv ${DATA_DIR}/${ENV}/dest.csv 1 10</stringProp>
          <stringProp name="filename">${SCRIPT_DIR}/split_csv_file.groovy</stringProp>
          <stringProp name="cacheKey">55a82a3a-d5be-42ba-a157-d6c68c8618b5</stringProp>
          <stringProp name="script"></stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="# concat strings from csv" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${DATA_DIR}/${ENV}/foo.csv</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">55a82a3a-d5be-42ba-a157-d6c68c8618b5</stringProp>
          <stringProp name="script">import org.apache.commons.io.FileUtils;
import org.apache.commons.io.LineIterator;

// 要读取的CSV文件
final String srcFile = args[0];
// 要读取的字段在CSV文件第几列，从0开始
final int colInCsv = 0;
// CSV文件的分隔符，一般为 ,
final String delimiterInCsv = &quot;,&quot;;
// CSV文件编码
final String encoding = &quot;UTF-8&quot;;

// 要保存到的变量名
final String varName = &quot;foo&quot;;
// 最多拼接多少条记录
final int concatAmount = 100;
// 分隔符
final String delimiter = &quot;,&quot;;

StringBuilder builder = new StringBuilder(8192);
LineIterator iterator;
try {
  iterator = FileUtils.lineIterator(new File(srcFile), encoding);
  int count = 0;
  while (iterator.hasNext() &amp;&amp; count &lt;= concatAmount) {
    String item = iterator.nextLine().split(delimiterInCsv)[colInCsv];
    
    if (count == 0) {
      builder.append(item);
    } else {
      builder.append(delimiter).append(item);
    }
    count++;
  }
} catch (IOException ex) {
  log.error(&quot;[ERROR] File not found: &quot; + srcFile, ex);
} finally {
  LineIterator.closeQuietly(iterator);
}

props.put(varName, builder.toString());</stringProp>
          <stringProp name="TestPlan.comments">从CSV文件取多行里的同一字段拼起来（例如多个userId拼成逗号分隔的字符串），保存到变量（属性）

参数：CSV文件路径
参数之间用空格分隔

按实际情况修改其他常量的值
调用：${__P(name)} ，name为你取的变量名</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="# concat strings from csv 2" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${DATA_DIR}/${ENV}/${userCsv} ${DATA_DIR}/${ENV}/${groupMemberCsv} 500</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">68a2fe2f-1d94-482c-996f-582d1f6f0485</stringProp>
          <stringProp name="script">import org.apache.commons.io.FileUtils;
import org.apache.commons.io.LineIterator;
import java.io.File;
import java.io.IOException;

// 要读取的CSV文件
final String srcFile = args[0];
// 要读取的字段在CSV文件第几列，从0开始
final int colInCsv = 0;
// CSV文件的分隔符，一般为 ,
final String delimiterInCsv = &quot;,&quot;;
// CSV文件编码
final String encoding = &quot;UTF-8&quot;;

// 要保存到的文件
final String targetFile = args[1];
// 最多拼接多少条记录
final int concatAmount = Integer.parseInt(args[2]);
// 分隔符
final String delimiter = &quot;,&quot;;

int capacity = 8192;
StringBuilder builder = new StringBuilder(capacity);
LineIterator iterator;
try {
  iterator = FileUtils.lineIterator(new File(srcFile), encoding);
  int count = 0;
  while (iterator.hasNext()) {
    String item = iterator.nextLine().split(delimiterInCsv)[colInCsv];
    
    if (count == 0) {
      builder.append(item);
      count++;
    } else if (count &gt;= concatAmount) {
    	 FileUtils.write(new File(targetFile), builder.toString() + System.lineSeparator(), true);
    	 
    	 builder = new StringBuilder(capacity).append(item);
    	 count = 1;
    } else if (!iterator.hasNext()) {
      FileUtils.write(new File(targetFile), builder.toString() + System.lineSeparator(), true);
    } else {
      builder.append(delimiter).append(item);
      count++;
    }
  }
} catch (IOException ex) {
  log.error(&quot;[ERROR] File not found: &quot; + srcFile, ex);
} finally {
  LineIterator.closeQuietly(iterator);
}
</stringProp>
          <stringProp name="TestPlan.comments">从CSV文件取多行里的同一字段拼起来，保存到另一个文件

参数：CSV文件路径
参数之间用空格分隔

按实际情况修改其他常量的值
调用：${__P(name)} ，name为你取的变量名</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="# extract from file" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${DATA_DIR}/${ENV}/src.csv ${DATA_DIR}/${ENV}/dest.csv</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">55a82a3a-d5be-42ba-a157-d6c68c8618b5</stringProp>
          <stringProp name="script">import org.apache.commons.io.FileUtils;
import org.apache.commons.io.LineIterator;

// 要读取的文件
final String srcFile = args[0];
// 要保存的文件
final String targetFile = args[1];
// 文件编码
final String encoding = &quot;UTF-8&quot;;
// 正则表达式
final def regex = /&quot;telephone&quot;:\s?&quot;(\d+?)&quot;/;

LineIterator iterator;
try {
  iterator = FileUtils.lineIterator(new File(srcFile), encoding);
  while (iterator.hasNext()) {
    String line = iterator.nextLine();
    def matcher = (line =~ regex);

    while (matcher.find()) {
      FileUtils.write(new File(targetFile), matcher.group(1) + System.lineSeparator(), true);
    }
  }
} catch (IOException ex) {
  log.error(&quot;[ERROR] File not found: &quot; + srcFile, ex);
} finally {
  LineIterator.closeQuietly(iterator);
}
</stringProp>
          <stringProp name="TestPlan.comments">例如系统使用手机号登录，从联系人文件里提取手机，保存到另一个文件</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="常用" enabled="true"/>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
          <stringProp name="TestPlan.comments">注意：无论放在什么控制器什么层级下，所有变量都会在测试开始运行时一起解析</stringProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value"> application/x-www-form-urlencoded</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value"> application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-FORWARDED-FOR</stringProp>
              <stringProp name="Header.value">${__Random(1, 255)}.${__Random(1, 255)}.${__Random(1, 255)}.${__Random(1, 255)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">CLIENT-IP</stringProp>
              <stringProp name="Header.value">${__Random(1, 255)}.${__Random(1, 255)}.${__Random(1, 255)}.${__Random(1, 255)}</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">通常放在线程组下
如果请求不是录的，从里面选一些合适的粘贴过去</stringProp>
        </HeaderManager>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">C</stringProp>
          <stringProp name="CounterConfig.format">000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
          <stringProp name="TestPlan.comments">放进线程组</stringProp>
        </CounterConfig>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="采样器（发请求）" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">如果使用分布式压测，可以在名字后带上 ${__machineName()} 方便定位请求来自哪台机器</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <JMeter.plugins.functional.samplers.websocket.WebSocketSampler guiclass="JMeter.plugins.functional.samplers.websocket.WebSocketSamplerGui" testclass="JMeter.plugins.functional.samplers.websocket.WebSocketSampler" testname="WebSocket Sampler" enabled="true">
            <stringProp name="serverAddress"></stringProp>
            <stringProp name="serverPort">80</stringProp>
            <stringProp name="implementation">RFC6455 (v13)</stringProp>
            <stringProp name="protocol">ws</stringProp>
            <stringProp name="contextPath"></stringProp>
            <stringProp name="contentEncoding">UTF-8</stringProp>
            <stringProp name="requestPayload"></stringProp>
            <stringProp name="connectionTimeout">5000</stringProp>
            <stringProp name="responseTimeout">20000</stringProp>
            <boolProp name="ignoreSslErrors">false</boolProp>
            <boolProp name="streamingConnection">false</boolProp>
            <stringProp name="connectionId"></stringProp>
            <stringProp name="responsePattern"></stringProp>
            <stringProp name="closeConncectionPattern"></stringProp>
            <stringProp name="proxyAddress"></stringProp>
            <stringProp name="proxyPassword"></stringProp>
            <stringProp name="proxyPort"></stringProp>
            <stringProp name="proxyUsername"></stringProp>
            <stringProp name="messageBacklog">3</stringProp>
            <elementProp name="queryStringParameters" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </JMeter.plugins.functional.samplers.websocket.WebSocketSampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">55a82a3a-d5be-42ba-a157-d6c68c8618b5</stringProp>
            <stringProp name="script"></stringProp>
            <stringProp name="TestPlan.comments">官方推荐 Groovy（最快，带预编译，可用Java语法）

注意：参数中可以用 ${} 变量，脚本中不要这么用，会被缓存，应该用 vars.get(&quot;xx&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="true">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command"></stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory"></stringProp>
            <stringProp name="TestPlan.comments">用命令行的方式启动可执行程序
通常用来测私有通讯协议，自己写个小程序调接口，返回内容输出到标准输出，交给JMeter解析</stringProp>
          </SystemSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="暂停" enabled="true"/>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
            <stringProp name="TestPlan.comments">固定暂停时间

注意：定时器在作用范围内每个请求发送前生效，如果有多个定时器生效，暂停时间会叠加</stringProp>
          </ConstantTimer>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="TestPlan.comments">高斯分布（正态分布），钟形曲线，指定的值附近的数字出现的概率最高
总暂停时间：random + offset

注意：定时器在作用范围内每个请求发送前生效，如果有多个定时器生效，暂停时间会叠加</stringProp>
            <stringProp name="ConstantTimer.delay">300</stringProp>
            <stringProp name="RandomTimer.range">100.0</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <PoissonRandomTimer guiclass="PoissonRandomTimerGui" testclass="PoissonRandomTimer" testname="Poisson Random Timer" enabled="true">
            <stringProp name="TestPlan.comments">泊松分布，长尾曲线，指定的值附近的数字出现的概率最高
总暂停时间：random + offset

注意：定时器在作用范围内每个请求发送前生效，如果有多个定时器生效，暂停时间会叠加</stringProp>
            <stringProp name="ConstantTimer.delay">300</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </PoissonRandomTimer>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">0</stringProp>
            <stringProp name="RandomTimer.range">100.0</stringProp>
            <stringProp name="TestPlan.comments">均匀分布，随机范围内的每个数字出现的概率相同
总暂停时间：random + offset

注意：定时器在作用范围内每个请求发送前生效，如果有多个定时器生效，暂停时间会叠加</stringProp>
          </UniformRandomTimer>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="# sleep" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
            <stringProp name="TestPlan.comments">用来暂停时相当于 Thread.sleep(xxx)
建议在它下面加定时器而不是直接在这里写死，因为定时器系数可以在user.properties文件里改，这样用命令行模式做测试时不用修改脚本就能调整暂停时间</stringProp>
          </TestAction>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="定时器（控制吞吐率）" enabled="true"/>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
            <intProp name="calcMode">4</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>6000.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <stringProp name="TestPlan.comments">限制每分钟请求数最多不超过设定值</stringProp>
          </ConstantThroughputTimer>
          <hashTree/>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
            <stringProp name="TestPlan.comments">让跑得快的线程sleep，凑够一定数量再一起发请求</stringProp>
            <intProp name="groupSize">10</intProp>
            <longProp name="timeoutInMs">1000</longProp>
          </SyncTimer>
          <hashTree/>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Throughput Shaping Timer" enabled="true">
            <collectionProp name="load_profile"/>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="pre processors" enabled="true"/>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">750f3711-0151-4305-b726-a7ddf8197f8a</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script"></stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="TestPlan.comments">官方推荐 Groovy（最快，带预编译，可用Java语法）

注意：参数中可以用 ${} 变量，脚本中不要这么用，会被缓存，应该用 vars.get(&quot;xx&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <URLRewritingModifier guiclass="URLRewritingModifierGui" testclass="URLRewritingModifier" testname="HTTP URL Re-writing Modifier" enabled="true">
            <stringProp name="argument_name"></stringProp>
            <boolProp name="path_extension">false</boolProp>
            <boolProp name="path_extension_no_equals">false</boolProp>
            <boolProp name="path_extension_no_questionmark">false</boolProp>
            <boolProp name="cache_value">false</boolProp>
            <boolProp name="encode">false</boolProp>
          </URLRewritingModifier>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="post processors" enabled="true"/>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="TestPlan.comments">$.foo[?(@.bar==&apos;baz&apos;)].foobar[0]</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">foo</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">0</intProp>
          </ResultAction>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="# extract json" enabled="true">
            <stringProp name="TestPlan.comments">使用fastjson包
（简单的提取用JSON Extractor，需要写代码才用这个）</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">eb60cbaf-5867-46dc-a23c-06f42fe38cd9</stringProp>
            <stringProp name="script">import com.alibaba.fastjson.*;

String response = prev.getResponseDataAsString();
try {
	JSONObject json = JSON.parseObject(response);

	// 常见套路
	JSONObject data = json.getJSONObject(&quot;data&quot;);
	JSONArray companies = data.getJSONArray(&quot;companies&quot;);
	JSONObject company = companies.getJSONObject(0);
	
	String companyId = company.getString(&quot;companyId&quot;);
	int resultCode = json.getIntValue(&quot;resultCode&quot;);
	boolean receivePush = data.getBooleanValue(&quot;receivePush&quot;);
} catch (Exception ex) {
	throw new RuntimeException(&quot;xxx&quot;, ex);
}
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="# put variable to property" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">eb60cbaf-5867-46dc-a23c-06f42fe38cd9</stringProp>
            <stringProp name="script">final String varName = &quot;foo&quot;;

props.put(varName, vars.get(varName));</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">foo</stringProp>
            <stringProp name="RegexExtractor.regex">left(.+?)right</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="TestPlan.comments">(.*?) (.+?)
$1$</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">eb60cbaf-5867-46dc-a23c-06f42fe38cd9</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script"></stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="TestPlan.comments">官方推荐 Groovy（最快，带预编译，可用Java语法）

注意：参数中可以用 ${} 变量，脚本中不要这么用，会被缓存，应该用 vars.get(&quot;xx&quot;)</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
            <stringProp name="HtmlExtractor.refname"></stringProp>
            <stringProp name="HtmlExtractor.expr"></stringProp>
            <stringProp name="HtmlExtractor.attribute"></stringProp>
            <stringProp name="HtmlExtractor.default"></stringProp>
            <stringProp name="HtmlExtractor.match_number"></stringProp>
            <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
          </HtmlExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="assertions" enabled="true"/>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">断言里可以用变量
注意：默认会断言状态码，如果用于功能测试，且预期返回4xx、5xx，勾上Ignore Status</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="# assert equal" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">65493f0f-b21b-4667-9f48-bdc2bcd8a89c</stringProp>
            <stringProp name="script">// 之前保存的变量名
final String varName = &quot;&quot;;
// 期望的值
final String expected = &quot;&quot;;

String actual = vars.get(varName);

if (!actual.equals(expected)) {
  AssertionResult.setFailureMessage(&quot;Expect &quot; + varName + &quot; to be: &quot; + expected + &quot;, actual: &quot; + actual);
  AssertionResult.setFailure(true);
}
</stringProp>
            <stringProp name="TestPlan.comments">通过后置处理器提取了变量（JMeter会转成字符串）后，比较字符串是否相等</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">65493f0f-b21b-4667-9f48-bdc2bcd8a89c</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script"></stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="TestPlan.comments">官方推荐 Groovy（最快，带预编译，可用Java语法）

注意：参数中可以用 ${} 变量，脚本中不要这么用，会被缓存，应该用 vars.get(&quot;xx&quot;)</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
            <stringProp name="SizeAssertion.size">1048576</stringProp>
            <intProp name="SizeAssertion.operator">6</intProp>
          </SizeAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
            <stringProp name="DurationAssertion.duration">2000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="适用于命令行模式的监听器" enabled="true"/>
        <hashTree>
          <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
            <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="graphiteMetricsSender" elementType="Argument">
                  <stringProp name="Argument.name">graphiteMetricsSender</stringProp>
                  <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.graphite.TextGraphiteMetricsSender</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="graphiteHost" elementType="Argument">
                  <stringProp name="Argument.name">graphiteHost</stringProp>
                  <stringProp name="Argument.value">localhost</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="graphitePort" elementType="Argument">
                  <stringProp name="Argument.name">graphitePort</stringProp>
                  <stringProp name="Argument.value">2003</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rootMetricsPrefix" elementType="Argument">
                  <stringProp name="Argument.name">rootMetricsPrefix</stringProp>
                  <stringProp name="Argument.value">jmeter.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="summaryOnly" elementType="Argument">
                  <stringProp name="Argument.name">summaryOnly</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="samplersList" elementType="Argument">
                  <stringProp name="Argument.name">samplersList</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="percentiles" elementType="Argument">
                  <stringProp name="Argument.name">percentiles</stringProp>
                  <stringProp name="Argument.value">50;90;95;99</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="classname">org.apache.jmeter.visualizers.backend.graphite.GraphiteBackendListenerClient</stringProp>
          </BackendListener>
          <hashTree/>
          <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Generate Summary Results" enabled="true">
            <stringProp name="TestPlan.comments">改成不同名字，放进不同线程组，命令行会分组显示结果</stringProp>
          </Summariser>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="流程控制" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&apos;${foo}&apos;.toLowerCase() != &apos;bar&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <stringProp name="TestPlan.comments">如果要判断变量不为空，要写作：&apos;${foo}&apos; != &apos;\${foo}&apos; （变量未定义时JMeter会当成普通字符串处理）</stringProp>
          </IfController>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(&apos;${foo}&apos; != &apos;&lt;EOF&gt;&apos;)}</stringProp>
          </WhileController>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">3</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="分组" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">要用JMeter自带的报告就不要勾Generate parent sample</stringProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="重用" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true"/>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller" enabled="true">
              <stringProp name="TestPlan.comments">使用相对于TEST_PLAN_DIR的路径，开头不能带/或./</stringProp>
              <stringProp name="IncludeController.includepath"></stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="鉴权" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list"/>
          </AuthManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DB" enabled="true"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MongoDB" enabled="true"/>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="# query" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">750f3711-0151-4305-b726-a7ddf8197f8a</stringProp>
            <stringProp name="script">import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;

import static com.mongodb.client.model.Filters.*;
import static com.mongodb.client.model.Sorts.*;

final String server = &quot;192.168.x.x&quot;;
final int port = 27017;
final String dbName = &quot;health&quot;;

final int userId = 12345;

MongoClient mongoClient = new MongoClient(server, port);
MongoDatabase db = mongoClient.getDatabase(dbName);

// 接口返回的信息来自2个表的内容
// 拜访记录表取_id
MongoCollection&lt;Document&gt; collection = db.getCollection(&quot;t_visit&quot;);
Document doc = collection.find(eq(&quot;userId&quot;, userId)).sort(descending(&quot;time&quot;)).first();

try {
  String rowId = doc.get(&quot;_id&quot;);

  // 关联拜访详情表
  MongoCollection&lt;Document&gt; collection2 = db.getCollection(&quot;t_visit_signed_detail&quot;);
  Document doc2 = collection2.find(eq(&quot;rId&quot;, rowId)).sort(descending(&quot;time&quot;)).first();
	
  vars.put(&quot;visitId&quot;, rowId);
  vars.put(&quot;coordinate&quot;, doc2.get(&quot;coordinate&quot;));
} catch (Exception ex) {
  throw new RuntimeException(&quot;[Error] &quot; + ex);
}
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="# query (need password)" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">750f3711-0151-4305-b726-a7ddf8197f8a</stringProp>
            <stringProp name="script">import com.mongodb.MongoClientURI;
import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;

import static com.mongodb.client.model.Filters.*;
import static com.mongodb.client.model.Sorts.*;

final String server = &quot;192.168.x.x&quot;;
final int port = 27017;

final String user = &quot;health&quot;;
final String pwd = &quot;healthnx&quot;;
final String dbName = &quot;health&quot;;

final int userId = 12345;

MongoClientURI uri = new MongoClientURI(
	&quot;mongodb://&quot; + user + &quot;:&quot; + pwd + &quot;@&quot; + server + &quot;:&quot; + port + &quot;/?authSource=&quot; + dbName);
MongoClient mongoClient = new MongoClient(uri);
MongoDatabase db = mongoClient.getDatabase(dbName);

// 接口返回的信息来自2个表的内容
// 拜访记录表取_id
MongoCollection&lt;Document&gt; collection = db.getCollection(&quot;t_visit&quot;);
Document doc = collection.find(eq(&quot;userId&quot;, userId)).sort(descending(&quot;time&quot;)).first();

try {
  String rowId = doc.get(&quot;_id&quot;);

  // 关联拜访详情表
  MongoCollection&lt;Document&gt; collection2 = db.getCollection(&quot;t_visit_signed_detail&quot;);
  Document doc2 = collection2.find(eq(&quot;rId&quot;, rowId)).sort(descending(&quot;time&quot;)).first();
	
  vars.put(&quot;visitId&quot;, rowId);
  vars.put(&quot;coordinate&quot;, doc2.get(&quot;coordinate&quot;));
} catch (Exception ex) {
  throw new RuntimeException(&quot;[Error] &quot; + ex);
}
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="# count" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">count1</stringProp>
            <stringProp name="script">import com.mongodb.DB;
import org.apache.jmeter.protocol.mongodb.config.MongoDBHolder;
import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import com.mongodb.DBCollection;

DB db = MongoDBHolder.getDBFromSource(&quot;db&quot;, &quot;test&quot;);

DBCollection coll = db.getCollection(&quot;testCollection&quot;);
int size = coll.count();
SampleResult.setResponseData(&quot;&quot; + size,&quot;UTF-8&quot;);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="# Insert" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">55a82a3a-d5be-42ba-a157-d6c68c8618b5</stringProp>
            <stringProp name="script">import com.mongodb.DB;
import org.apache.jmeter.protocol.mongodb.config.MongoDBHolder;
import com.mongodb.WriteResult;
import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.WriteConcern;
import com.mongodb.WriteResult;

// Get DB
com.mongodb.DB db = org.apache.jmeter.protocol.mongodb.config.MongoDBHolder.getDBFromSource(&quot;db&quot;, &quot;test&quot;);

// Get collection to insert
DBCollection coll = db.getCollection(&quot;testCollection&quot;);
BasicDBObject doc = new BasicDBObject(&quot;name&quot;, &quot;MongoDB&quot;)
					.append(&quot;type&quot;, &quot;database&quot;)
					.append(&quot;count&quot;, 1)
					.append(&quot;info&quot;, new BasicDBObject(&quot;x&quot;, 203)
					.append(&quot;y&quot;, 102));

// Insert object
WriteResult wr = coll.insert(doc, WriteConcern.ACKNOWLEDGED);

// Set response data
SampleResult.setResponseData(&quot;&quot; + wr.toString(), &quot;UTF-8&quot;);</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MySQL" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="dataSource">mysql</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://192.168.18.73:3306/hkmall_test</stringProp>
            <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="password"></stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <stringProp name="username"></stringProp>
            <stringProp name="TestPlan.comments">这组件里面用不了变量——它在用户定义变量组件之前加载
变通办法：

A. 复制多份，改成不同环境的连接设置，通过启用／禁用来切换环境
B. 在user.properties文件里定义属性，在这里用 ${__P(propName)} 调用，propName为你取的属性名</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="# delete" enabled="true">
            <stringProp name="dataSource">mysql</stringProp>
            <stringProp name="query">delete from foo where bar in(1,2,3,4);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="TestPlan.comments">变量名要跟连接设置里的变量名保持一致</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.config.redis.RedisDataSet guiclass="TestBeanGUI" testclass="kg.apc.jmeter.config.redis.RedisDataSet" testname="jp@gc - Redis Data Set" enabled="true">
          <stringProp name="database">0</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <intProp name="getMode">0</intProp>
          <stringProp name="host"></stringProp>
          <intProp name="maxActive">20</intProp>
          <intProp name="maxIdle">10</intProp>
          <longProp name="maxWait">30000</longProp>
          <longProp name="minEvictableIdleTimeMillis">60000</longProp>
          <intProp name="minIdle">0</intProp>
          <intProp name="numTestsPerEvictionRun">0</intProp>
          <stringProp name="password"></stringProp>
          <stringProp name="port">6379</stringProp>
          <stringProp name="redisKey"></stringProp>
          <longProp name="softMinEvictableIdleTimeMillis">60000</longProp>
          <boolProp name="testOnBorrow">false</boolProp>
          <boolProp name="testOnReturn">false</boolProp>
          <boolProp name="testWhileIdle">false</boolProp>
          <longProp name="timeBetweenEvictionRunsMillis">30000</longProp>
          <stringProp name="timeout">2000</stringProp>
          <stringProp name="variableNames"></stringProp>
          <intProp name="whenExhaustedAction">2</intProp>
        </kg.apc.jmeter.config.redis.RedisDataSet>
        <hashTree/>
      </hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="调试 &amp; 功能测试" enabled="true"/>
      <hashTree>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="# mock" enabled="true">
          <stringProp name="TestPlan.comments">不需要走网络请求，用来测试JMeter在本机的性能，选择最合适的线程数
或在接口开发完之前用来调试脚本，检验断言正确性

SleepMask 用来增加随机性：totalSleepTime = SleepTime + (System.currentTimeMillis() % SleepMask)
默认0xff，即255

Status 的值如果不是 OK ，就视为失败</stringProp>
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Sleep_Time" elementType="Argument">
                <stringProp name="Argument.name">Sleep_Time</stringProp>
                <stringProp name="Argument.value">100</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Sleep_Mask" elementType="Argument">
                <stringProp name="Argument.name">Sleep_Mask</stringProp>
                <stringProp name="Argument.value">0xFF</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Label" elementType="Argument">
                <stringProp name="Argument.name">Label</stringProp>
                <stringProp name="Argument.value"># threadnum: ${__threadNum()}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResponseCode" elementType="Argument">
                <stringProp name="Argument.name">ResponseCode</stringProp>
                <stringProp name="Argument.value">200</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResponseMessage" elementType="Argument">
                <stringProp name="Argument.name">ResponseMessage</stringProp>
                <stringProp name="Argument.value">OK</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Status" elementType="Argument">
                <stringProp name="Argument.name">Status</stringProp>
                <stringProp name="Argument.value">OK</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SamplerData" elementType="Argument">
                <stringProp name="Argument.name">SamplerData</stringProp>
                <stringProp name="Argument.value">qwerty</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResultData" elementType="Argument">
                <stringProp name="Argument.name">ResultData</stringProp>
                <stringProp name="Argument.value">The quick brown fox jumps over the lazy dog</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.protocol.java.test.JavaTest</stringProp>
        </JavaSampler>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="# debug" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
          <stringProp name="TestPlan.comments">放在线程组最后，在View Results Tree里就能检查变量／属性的值
注意：在脚本调通后禁用掉</stringProp>
        </DebugSampler>
        <hashTree/>
        <ConfigTestElement guiclass="PropertyControlGui" testclass="ConfigTestElement" testname="Property Display" enabled="true">
          <stringProp name="TestPlan.comments">放进工作台</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="TestPlan.comments">注意：GUI模式只适合用来调试，调通脚本后禁用所有监听器，关掉界面，改用命令行运行测试

特别注意：只能用于调试或功能测试，不能用于性能测试</stringProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="TestPlan.comments">注意：GUI模式只适合用来调试，调通脚本后禁用所有监听器，关掉界面，改用命令行运行测试

特别注意：只能用于调试或功能测试，不能用于性能测试</stringProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
          <stringProp name="TestPlan.comments">注意：GUI模式只适合用来调试，调通脚本后禁用所有监听器，关掉界面，改用命令行运行测试

用于功能测试或下载大文件的测试

~/ 表示相对.jmx文件路径
如果识别不了文件类型，后缀是.unknown</stringProp>
          <stringProp name="FileSaver.filename">${BASE_DIR}/user-files/bodies/${ENV}/response_</stringProp>
          <boolProp name="FileSaver.errorsonly">false</boolProp>
          <boolProp name="FileSaver.skipautonumber">false</boolProp>
          <boolProp name="FileSaver.skipsuffix">false</boolProp>
          <boolProp name="FileSaver.successonly">true</boolProp>
          <stringProp name="FileSaver.variablename">response</stringProp>
        </ResultSaver>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
