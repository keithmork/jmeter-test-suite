#!/bin/bash

readonly GREP_KEYWORD="grafana-server"

# 当前脚本所在目录
[[ "$(dirname "$0")" == "." ]] && readonly SCRIPT_DIR="$(pwd)" \
    || readonly SCRIPT_DIR="$(dirname "$0")"

# ========== 函数 ==========

function show_process() {
    # 排除grep和当前脚本名（往往带有关键字）
    ps aux | grep "${GREP_KEYWORD}" | grep -v "grep" | grep -v "$(basename "$0")"
}

function get_pid() {
    pid="$(show_process | awk '{print $2}')"
}

# 检查程序有没有装、环境变量有没有设之类
function check_env() {
    grafana-server -v > /dev/null 2>&1

    if [[ "$?" -ne 0 ]]; then
        echo "[ERROR] Cannot find ${GREP_KEYWORD}" > 2
        exit 1
    fi
}

# 启动程序需要做的具体操作
function start_app() {
    local config_file="${SCRIPT_DIR}/grafana.ini"
    local log_dir="${SCRIPT_DIR}/../result"

    local grafana_home="${GRAFANA_HOME:-/usr/local/share/grafana}"
    [[ -n ${GRAFANA_HOME} ]] \
        && echo "Using GRAFANA_HOME: ${GRAFANA_HOME}" \
        || echo "Cannot find GRAFANA_HOME, setting homepath to ${grafana_home}"

    grafana-server --config "${config_file}" --homepath "${grafana_home}" \
        > "${log_dir}/grafana.log" 2> "${log_dir}/grafana_error.log" &

    # 这东西启动出错不报错……要自己返回错误码
    # pid不为空返回 0，为空返回 1
    get_pid
    [[ -n "${pid}" ]]
}

# 关闭程序需要做的具体操作
function stop_app() {
    get_pid
    if [[ -n "${pid}" ]]; then
        kill -9 ${pid}
    fi
}

# ========== 下面都是套路 ==========

function status() {
    get_pid
    if [[ -z "$pid" ]]; then
        echo "Status: not running"
    else
        echo "Status: running  PID: ${pid}"
        echo "Details:"
        show_process
    fi
}

function start() {
    get_pid
    if [[ -z "$pid" ]]; then
        check_env
        echo "STARTING..."
        start_app
        if [[ "$?" -eq 0 ]]; then
            echo "SUCCESS"
            status
        else
            echo "FAILED"
            exit 1
        fi
    else
        status
    fi
}

function stop() {
    get_pid
    if [[ -z "$pid" ]]; then
        status
    else
        echo "STOPPING..."
        stop_app
        if [[ "$?" -eq 0 ]]; then
            echo "SUCCESS"
            status
        else
            echo "FAILED"
            exit 1
        fi
    fi
}

function main() {
    # 判断命令行参数个数
    if [[ "$#" -eq 0 ]]; then
        param="help"
    else
        param=$1
    fi

    case "${param}" in
        "start")
            start
            ;;
        "stop")
            stop
            ;;
        "restart")
            stop
            start
            ;;
        "status")
            status
            ;;
        *) echo "Usage: $0 start | stop | restart | status"
    esac
}


main "$@"
